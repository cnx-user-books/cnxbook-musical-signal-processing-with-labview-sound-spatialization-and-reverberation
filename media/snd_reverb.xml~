<!--title = Reverberation
-->

<?xml version='1.0' standalone='yes' ?>
<LVData>
<Version>8.2</Version>

<!-------------------------------------------------------->
<String> <Name>sec</Name> <Val>Introduction</Val> </String>

<String> <Name>para</Name> <Val>
		{term}Reverberation{/term} is a property of concert halls that greatly adds to the enjoyment of a music performance.
		The on-stage performer generates sound waves which propagate directly to the listener's ear. However, sound waves
		also bounce off the floor, walls, ceiling, and back wall of the stage, creating myriad copies of the direct sound that are
		time-delayed and reduced in intensity.

		In this module you will be introduced to the concept of reverberation in more detail, and will learn how to emulate
		reverberation using a digital filter structure known as a {term}comb filter{/term}.

		The screencast video of {cnxn target=&quot;video-reverb&quot;/} continues the discussion by visualizing the sound paths
		in a reverberant environment. The {term}impulse response{/term} of the reverberant environment is also introduced.
		Understanding the desired impulse response is the first step toward emulating reverberation with a digital filter.
</Val> </String>

<Cluster> <Name>video</Name> <NumElts>4</NumElts>
<String> <Name>ID (optional)</Name> <Val>video-reverb</Val> </String>
<String> <Name>video name</Name> <Val>concept</Val> </String>
<String> <Name>webpage title</Name> <Val>Reverberation concept</Val> </String>
<String> <Name>caption</Name> <Val>Sound paths in a reverberant environment, and its impulse response</Val> </String>
</Cluster>



<String> <Name>secend</Name> <Val></Val> </String>
<!-------------------------------------------------------->
<String> <Name>sec</Name> <Val>Comb Filter Theory</Val> </String>

<String> <Name>para</Name> <Val>
		The {term}comb filter{/term} is a relatively simple digital filter structure based on a {term}delay line{/term} 
		and {term}feedback{/term}. Watch the screencast video of {cnxn target=&quot;video-combfilter-theory&quot;/} 
		to learn how the comb filter structure can be developed by considering an idealized version of the impulse
		response of a reverberant environment.
</Val> </String>

<Cluster> <Name>video</Name> <NumElts>4</NumElts>
<String> <Name>ID (optional)</Name> <Val>video-combfilter-theory</Val> </String>
<String> <Name>video name</Name> <Val>combfilter-theory</Val> </String>
<String> <Name>webpage title</Name> <Val>Comb filter theory</Val> </String>
<String> <Name>caption</Name> <Val>Development of the {term}comb filter{/term} structure as a way to implement an idealized reverberant
		impulse response</Val> </String>
</Cluster>

<String> <Name>para</Name> <Val>
		The {term}difference equation{/term} of the comb filter is required in order to implement the filter in LabVIEW. In
		general, a difference equation states the filter output y(n) as a function of the past and present input values as well
		as past output values.

		Take some time now to derive the comb filter difference equation as requested by the following exercise.
</Val> </String>

<Cluster> <Name>exercise</Name> <NumElts>2</NumElts>
	<String> <Name>problem text</Name> <Val>Derive the difference equation of the comb filter structure shown at the end of the
			video of {cnxn target=&quot;video-combfilter-theory&quot;/}.</Val> </String>
<String> <Name>solution text</Name> <Val></Val> </String>
{!-- MathType@Translator@5@5@MathML2 (m namespace).tdl@MathML 2.0 (m namespace)@ --}
{m:math}
 {m:semantics}
  {m:mrow}
   {m:mi}y{/m:mi}{m:mo stretchy=&apos;false&apos;}({/m:mo}{m:mi}n{/m:mi}{m:mo stretchy=&apos;false&apos;}){/m:mo}{m:mo}={/m:mo}{m:mi}x{/m:mi}{m:mo stretchy=&apos;false&apos;}({/m:mo}{m:mi}n{/m:mi}{m:mo stretchy=&apos;false&apos;}){/m:mo}{m:mo}+{/m:mo}{m:mi}g{/m:mi}{m:mi}y{/m:mi}{m:mo stretchy=&apos;false&apos;}({/m:mo}{m:mi}n{/m:mi}{m:mo}&amp;#x2212;{/m:mo}{m:mi}N{/m:mi}{m:mo stretchy=&apos;false&apos;}){/m:mo}
  {/m:mrow}
 {m:annotation encoding=&apos;MathType-MTEF&apos;}
 MathType@MTEF@5@5@+=feaagaart1ev2aaatCvAUfeBSjuyZL2yd9gzLbvyNv2CaerbuLwBLnhiov2DGi1BTfMBaeXatLxBI9gBaerbd9wDYLwzYb1uaebbnrfifHhDYfgasaacH8YjY=vipgYlh9vqqj=hEeeu0xXdbba9frFj0=OqFfea0dXdd9vqai=hGuQ8kuc9pgc9q8qqaq=dir=f0=yqaiVgFr0xfr=xfr=xb9adbaqaaeGaciGaaiaabeqaamaabaabaaGcbaGaamyEaiaacIcacaWGUbGaaiykaiabg2da9iaadIhacaGGOaGaamOBaiaacMcacqGHRaWkcaWGNbGaamyEaiaacIcacaWGUbGaeyOeI0IaamOtaiaacMcaaaa@43AC@{/m:annotation}
 {/m:semantics}
{/m:math}
{!-- MathType@End@5@5@ --}
</Cluster>



<String> <Name>secend</Name> <Val></Val> </String>
<!-------------------------------------------------------->
<String> <Name>sec</Name> <Val>Comb Filter Implementation</Val> </String>

<String> <Name>para</Name> <Val>
		Once the difference equation is available, the coefficients of the equation can be applied to the LabVIEW "IIR" (infinite impulse response) digital
		filter. The screencast video of {cnxn target=&quot;video-combfilter-build&quot;/} walks through the complete process needed to convert the 
		comb filter difference equation into a LabVIEW VI. The LabVIEW {term}MathScript node{/term} is used to create the coefficient vectors. After
		implementing the comb filter, its impulse response is explored for different values of delay line length and feedback gain.

		Please follow along with the video and create your own version of the comb filter in LabVIEW.
</Val> </String>

<Cluster> <Name>video</Name> <NumElts>4</NumElts>
<String> <Name>ID (optional)</Name> <Val>video-combfilter-build</Val> </String>
<String> <Name>video name</Name> <Val>combfilter-build</Val> </String>
<String> <Name>webpage title</Name> <Val>Comb filter implementation</Val> </String>
<String> <Name>caption</Name> <Val>Implementing the comb filter in LabVIEW; exploration of the impulse response as a function of delay line length and feedback gain.</Val> </String>
</Cluster>

<String> <Name>secend</Name> <Val></Val> </String>
<!-------------------------------------------------------->
<String> <Name>sec</Name> <Val>Loop Time and Reverb Time</Val> </String>

<String> <Name>para</Name> <Val>
		As you have learned in previous sections, the comb filter behavior is determined by the delay line length N and the feedback coefficient g. From
		a user's point of view, however, these two parameters are not very intuitive. Instead, the comb filter behavior is normally specified by
		{term}loop time{/term}
{!-- MathType@Translator@5@5@MathML2 (m namespace).tdl@MathML 2.0 (m namespace)@ --}
{m:math}
 {m:semantics}
  {m:mi}&amp;#x03C4;{/m:mi}
 {m:annotation encoding=&apos;MathType-MTEF&apos;}
 MathType@MTEF@5@5@+=feaagaart1ev2aqatCvAUfeBSjuyZL2yd9gzLbvyNv2CaerbuLwBLnhiov2DGi1BTfMBaeXatLxBI9gBaerbd9wDYLwzYb1uaebbnrfifHhDYfgasaacH8YjY=vipgYlh9vqqj=hEeeu0xXdbba9frFj0=OqFfea0dXdd9vqai=hGuQ8kuc9pgc9q8qqaq=dir=f0=yqaiVgFr0xfr=xfr=xb9adbaqaaeGaciGaaiaabeqaamaabaabaaGcbaGaeqiXdqhaaa@3701@{/m:annotation}
 {/m:semantics}
{/m:math}
{!-- MathType@End@5@5@ --} and {term}reverb time{/term} denoted
{!-- MathType@Translator@5@5@MathML2 (m namespace).tdl@MathML 2.0 (m namespace)@ --}
{m:math}
 {m:semantics}
  {m:mrow}
   {m:msub}
    {m:mi}T{/m:mi}
    {m:mrow}
     {m:mn}60{/m:mn}
    {/m:mrow}
   {/m:msub}
  {/m:mrow}
 {m:annotation encoding=&apos;MathType-MTEF&apos;}
 MathType@MTEF@5@5@+=feaagaart1ev2aqatCvAUfeBSjuyZL2yd9gzLbvyNv2CaerbuLwBLnhiov2DGi1BTfMBaeXatLxBI9gBaerbd9wDYLwzYb1uaebbnrfifHhDYfgasaacH8YjY=vipgYlh9vqqj=hEeeu0xXdbba9frFj0=OqFfea0dXdd9vqai=hGuQ8kuc9pgc9q8qqaq=dir=f0=yqaiVgFr0xfr=xfr=xb9adbaqaaeGaciGaaiaabeqaamaabaabaaGcbaGaamivamaaBaaaleaacaaI2aGaaGimaaqabaaaaa@37BB@{/m:annotation}
 {/m:semantics}
{/m:math}
{!-- MathType@End@5@5@ --}; reverb time may also be written as 
{!-- MathType@Translator@5@5@MathML2 (m namespace).tdl@MathML 2.0 (m namespace)@ --}
{m:math}
 {m:semantics}
  {m:mrow}
   {m:msub}
    {m:mi}R{/m:mi}
    {m:mrow}
     {m:mi}T{/m:mi}{m:mn}60{/m:mn}
    {/m:mrow}
   {/m:msub}
  {/m:mrow}
 {m:annotation encoding=&apos;MathType-MTEF&apos;}
 MathType@MTEF@5@5@+=feaagaart1ev2aqatCvAUfeBSjuyZL2yd9gzLbvyNv2CaerbuLwBLnhiov2DGi1BTfMBaeXatLxBI9gBaerbd9wDYLwzYb1uaebbnrfifHhDYfgasaacH8YjY=vipgYlh9vqqj=hEeeu0xXdbba9frFj0=OqFfea0dXdd9vqai=hGuQ8kuc9pgc9q8qqaq=dir=f0=yqaiVgFr0xfr=xfr=xb9adbaqaaeGaciGaaiaabeqaamaabaabaaGcbaGaamOuamaaBaaaleaacaWGubGaaGOnaiaaicdaaeqaaaaa@3892@{/m:annotation}
 {/m:semantics}
{/m:math}
{!-- MathType@End@5@5@ --}. Loop time indicates the amount of time necessary for a given sample to pass through the delay line, and is therefore the delay line length N times the
sampling interval. The sampling interval is the reciprocal of sampling frequency, so the loop time may be expressed as in {cnxn target=&quot;eqn-looptime&quot;/}:
</Val> </String>

<Cluster> <Name>equation</Name> <NumElts>3</NumElts>
<String> <Name>ID (optional)</Name> <Val>eqn-looptime</Val> </String>
<String> <Name>name (optional)</Name> <Val></Val> </String>
<String> <Name>MathML text</Name> <Val>
{!-- MathType@Translator@5@5@MathML2 (m namespace).tdl@MathML 2.0 (m namespace)@ --}
{m:math}
 {m:semantics}
  {m:mrow}
   {m:mi}&amp;#x03C4;{/m:mi}{m:mo}={/m:mo}{m:mfrac}
    {m:mi}N{/m:mi}
    {m:mrow}
     {m:msub}
      {m:mi}f{/m:mi}
      {m:mi}S{/m:mi}
     {/m:msub}
    {/m:mrow}
   {/m:mfrac}
  {/m:mrow}
 {m:annotation encoding=&apos;MathType-MTEF&apos;}
 MathType@MTEF@5@5@+=feaagaart1ev2aaatCvAUfeBSjuyZL2yd9gzLbvyNv2CaerbuLwBLnhiov2DGi1BTfMBaeXatLxBI9gBaerbd9wDYLwzYb1uaebbnrfifHhDYfgasaacH8YjY=vipgYlh9vqqj=hEeeu0xXdbba9frFj0=OqFfea0dXdd9vqai=hGuQ8kuc9pgc9q8qqaq=dir=f0=yqaiVgFr0xfr=xfr=xb9adbaqaaeGaciGaaiaabeqaamaabaabaaGcbaGaeqiXdqNaeyypa0ZaaSaaaeaacaWGobaabaGaamOzamaaBaaaleaacaWGtbaabeaaaaaaaa@3AD8@{/m:annotation}
 {/m:semantics}
{/m:math}
{!-- MathType@End@5@5@ --}
</Val> </String>
</Cluster>

<String> <Name>para</Name> <Val>
		Reverb time indicates the amount of time required for the reverberant signal's intensity to drop by 60 dB (dB = decibels), effectively to silence. 
		Recall from the screencast video
		of {cnxn target=&quot;video-combfilter-theory&quot;/} that the comb filter's impulse response looks like a series of decaying impulses spaced by a delay 
		of N samples; this impulse response is plotted in {cnxn target=&quot;fig-impulseresponse&quot;/} with the independent axis measured in time rather than
		samples.
</Val> </String>

<Cluster> <Name>image</Name> <NumElts>3</NumElts>
<String> <Name>ID (optional)</Name> <Val>fig-impulseresponse</Val> </String>
<String> <Name>name</Name> <Val>impulseresponse</Val> </String>
<String> <Name>caption</Name> <Val>Comb filter impulse response</Val> </String>
</Cluster>

<String> <Name>para</Name> <Val>
		Take a few minutes to derive an equation for the comb filter feedback gain "g" as a function of the loop time and the reverb time. The following
		pair of exercises will guide you through the derivation.
</Val> </String>

<Cluster> <Name>exercise</Name> <NumElts>2</NumElts>
	<String> <Name>problem text</Name> <Val>Given the comb filter impulse response pictured in {cnxn target=&quot;fig-impulseresponse&quot;/}, derive an
			equation for the reverb time
{!-- MathType@Translator@5@5@MathML2 (m namespace).tdl@MathML 2.0 (m namespace)@ --}
{m:math}
 {m:semantics}
  {m:mrow}
   {m:msub}
    {m:mi}T{/m:mi}
    {m:mrow}
     {m:mn}60{/m:mn}
    {/m:mrow}
   {/m:msub}
  {/m:mrow}
 {m:annotation encoding=&apos;MathType-MTEF&apos;}
 MathType@MTEF@5@5@+=feaagaart1ev2aqatCvAUfeBSjuyZL2yd9gzLbvyNv2CaerbuLwBLnhiov2DGi1BTfMBaeXatLxBI9gBaerbd9wDYLwzYb1uaebbnrfifHhDYfgasaacH8YjY=vipgYlh9vqqj=hEeeu0xXdbba9frFj0=OqFfea0dXdd9vqai=hGuQ8kuc9pgc9q8qqaq=dir=f0=yqaiVgFr0xfr=xfr=xb9adbaqaaeGaciGaaiaabeqaamaabaabaaGcbaGaamivamaaBaaaleaacaaI2aGaaGimaaqabaaaaa@37BB@{/m:annotation}
 {/m:semantics}
{/m:math}
{!-- MathType@End@5@5@ --} in terms of the loop time
{!-- MathType@Translator@5@5@MathML2 (m namespace).tdl@MathML 2.0 (m namespace)@ --}
{m:math}
 {m:semantics}
  {m:mi}&amp;#x03C4;{/m:mi}
 {m:annotation encoding=&apos;MathType-MTEF&apos;}
 MathType@MTEF@5@5@+=feaagaart1ev2aqatCvAUfeBSjuyZL2yd9gzLbvyNv2CaerbuLwBLnhiov2DGi1BTfMBaeXatLxBI9gBaerbd9wDYLwzYb1uaebbnrfifHhDYfgasaacH8YjY=vipgYlh9vqqj=hEeeu0xXdbba9frFj0=OqFfea0dXdd9vqai=hGuQ8kuc9pgc9q8qqaq=dir=f0=yqaiVgFr0xfr=xfr=xb9adbaqaaeGaciGaaiaabeqaamaabaabaaGcbaGaeqiXdqhaaa@3701@{/m:annotation}
 {/m:semantics}
{/m:math}
{!-- MathType@End@5@5@ --} and the comb filter's feedback constant g. Hint: Recall the basic equation to express the ratio of two amplitudes in decibels, i.e., use the form with a factor of 20.
	</Val> </String>
	<String> <Name>solution text</Name> <Val>
{!-- MathType@Translator@5@5@MathML2 (m namespace).tdl@MathML 2.0 (m namespace)@ --}
{m:math}
 {m:semantics}
  {m:mrow}
   {m:msub}
    {m:mi}T{/m:mi}
    {m:mrow}
     {m:mn}60{/m:mn}
    {/m:mrow}
   {/m:msub}
   {m:mo}={/m:mo}{m:mfrac}
    {m:mrow}
     {m:mo}&amp;#x2212;{/m:mo}{m:mn}3{/m:mn}{m:mi}&amp;#x03C4;{/m:mi}
    {/m:mrow}
    {m:mrow}
     {m:msub}
      {m:mrow}
       {m:mi}log{/m:mi}{m:mo}&amp;#x2061;{/m:mo}
      {/m:mrow}
      {m:mrow}
       {m:mn}10{/m:mn}
      {/m:mrow}
     {/m:msub}
     {m:mi}g{/m:mi}
    {/m:mrow}
   {/m:mfrac}
  {/m:mrow}
 {m:annotation encoding=&apos;MathType-MTEF&apos;}
 MathType@MTEF@5@5@+=feaagaart1ev2aaatCvAUfeBSjuyZL2yd9gzLbvyNv2CaerbuLwBLnhiov2DGi1BTfMBaeXatLxBI9gBaerbd9wDYLwzYb1uaebbnrfifHhDYfgasaacH8YjY=vipgYlh9vqqj=hEeeu0xXdbba9frFj0=OqFfea0dXdd9vqai=hGuQ8kuc9pgc9q8qqaq=dir=f0=yqaiVgFr0xfr=xfr=xb9adbaqaaeGaciGaaiaabeqaamaabaabaaGcbaGaamivamaaBaaaleaacaaI2aGaaGimaaqabaGccqGH9aqpdaWcaaqaaiabgkHiTiaaiodacqaHepaDaeaaciGGSbGaai4BaiaacEgadaWgaaWcbaGaaGymaiaaicdaaeqaaOGaam4zaaaaaaa@41B0@{/m:annotation}
 {/m:semantics}
{/m:math}
{!-- MathType@End@5@5@ --}
	</Val> </String>
</Cluster>

<Cluster> <Name>exercise</Name> <NumElts>2</NumElts>
	<String> <Name>problem text</Name> <Val>Based on your previous derivation, develop and equation for the comb filter gain "g" in terms of the desired loop time
	and reverb time.</Val> </String>
<String> <Name>solution text</Name> <Val>
{!-- MathType@Translator@5@5@MathML2 (m namespace).tdl@MathML 2.0 (m namespace)@ --}
{m:math}
 {m:semantics}
  {m:mrow}
   {m:mi}g{/m:mi}{m:mo}={/m:mo}{m:msup}
    {m:mrow}
     {m:mn}10{/m:mn}
    {/m:mrow}
    {m:mrow}
     {m:mo}&amp;#x2212;{/m:mo}{m:mfrac}
      {m:mrow}
       {m:mn}3{/m:mn}{m:mi}&amp;#x03C4;{/m:mi}
      {/m:mrow}
      {m:mrow}
       {m:msub}
        {m:mi}T{/m:mi}
        {m:mrow}
         {m:mn}60{/m:mn}
        {/m:mrow}
       {/m:msub}
      {/m:mrow}
     {/m:mfrac}
    {/m:mrow}
   {/m:msup}
  {/m:mrow}
 {m:annotation encoding=&apos;MathType-MTEF&apos;}
 MathType@MTEF@5@5@+=feaagaart1ev2aaatCvAUfeBSjuyZL2yd9gzLbvyNv2CaerbuLwBLnhiov2DGi1BTfMBaeXatLxBI9gBaerbd9wDYLwzYb1uaebbnrfifHhDYfgasaacH8YjY=vipgYlh9vqqj=hEeeu0xXdbba9frFj0=OqFfea0dXdd9vqai=hGuQ8kuc9pgc9q8qqaq=dir=f0=yqaiVgFr0xfr=xfr=xb9adbaqaaeGaciGaaiaabeqaamaabaabaaGcbaGaam4zaiabg2da9iaaigdacaaIWaWaaWbaaSqabeaacqGHsisldaWcaaqaaiaaiodacqaHepaDaeaacaWGubWaaSbaaWqaaiaaiAdacaaIWaaabeaaaaaaaaaa@3ECE@{/m:annotation}
 {/m:semantics}
{/m:math}
{!-- MathType@End@5@5@ --}
</Val> </String>
</Cluster>

<Cluster> <Name>exercise</Name> <NumElts>2</NumElts>
<String> <Name>problem text</Name> <Val>To finish up, derive the equation for the comb filter delay "N" in terms of the desired loop time.</Val> </String>
<String> <Name>solution text</Name> <Val>
{!-- MathType@Translator@5@5@MathML2 (m namespace).tdl@MathML 2.0 (m namespace)@ --}
{m:math}
 {m:semantics}
  {m:mrow}
   {m:mi}N{/m:mi}{m:mo}={/m:mo}{m:mi}&amp;#x03C4;{/m:mi}{m:msub}
    {m:mi}f{/m:mi}
    {m:mi}S{/m:mi}
   {/m:msub}
  {/m:mrow}
 {m:annotation encoding=&apos;MathType-MTEF&apos;}
 MathType@MTEF@5@5@+=feaagaart1ev2aaatCvAUfeBSjuyZL2yd9gzLbvyNv2CaerbuLwBLnhiov2DGi1BTfMBaeXatLxBI9gBaerbd9wDYLwzYb1uaebbnrfifHhDYfgasaacH8YjY=vipgYlh9vqqj=hEeeu0xXdbba9frFj0=OqFfea0dXdd9vqai=hGuQ8kuc9pgc9q8qqaq=dir=f0=yqaiVgFr0xfr=xfr=xb9adbaqaaeGaciGaaiaabeqaamaabaabaaGcbaGaamOtaiabg2da9iabes8a0jaadAgadaWgaaWcbaGaam4uaaqabaaaaa@3AC8@{/m:annotation}
 {/m:semantics}
{/m:math}
{!-- MathType@End@5@5@ --}
</Val> </String>
</Cluster>

<String> <Name>para</Name> <Val>
		Now, return to your own comb filter VI, and modify the front panel controls and MathScript node to use loop time and reverb time as the primary user inputs.
		Experiment with your modified system to ensure that the spacing between impulses does indeed match the specified loop time, and that the impulse decay rate makes
		sense for the specified reverb time.
</Val> </String>


<String> <Name>secend</Name> <Val></Val> </String>
<!-------------------------------------------------------->
<String> <Name>sec</Name> <Val>Comb Filter Implementation for Audio Signals</Val> </String>

<String> <Name>para</Name> <Val>
		In this section you will learn how to build a comb filter in LabVIEW that can process an audio signal,
		specifically, an impulse source. Follow along with the screencast video
		of {cnxn target=&quot;video-combfilter-audio&quot;/} to create your own VI. The video includes an
		audio demonstration of the finished result. As a bonus, the video will explain where
	       the "comb filter" gets its name!
</Val> </String>

<Cluster> <Name>video</Name> <NumElts>4</NumElts>
<String> <Name>ID (optional)</Name> <Val>video-combfilter-audio</Val> </String>
<String> <Name>video name</Name> <Val>combfilter-audio</Val> </String>
<String> <Name>webpage title</Name> <Val>Comb filter for audio</Val> </String>
<String> <Name>caption</Name> <Val>Building a LabVIEW VI of a comb filter that can process an audio signal</Val> </String>
</Cluster>

<String> <Name>para</Name> <Val>
		Next, the impulse source can be replaced by a audio .wav file. Speech makes a good test signal, and
		the screencast video of {cnxn target=&quot;video-combfilter-wav&quot;/} shows how to modify your
		VI to use a .wav audio file as the signal source. The speech clip used as an example in the video is available
		here: {link src=&quot;speech.wav&quot;}speech.wav{/link} (audio courtesy of the Open Speech Repository,
		{link src=&quot;http://www.voiptroubleshooter.com/open_speech&quot;}www.voiptroubleshooter.com/open_speech{/link}; the sentences are two of the many phonetically-balanced {term}Harvard Sentences{/term}, an important standard
	       for the speech processing community).
</Val> </String>

<Cluster> <Name>video</Name> <NumElts>4</NumElts>
<String> <Name>ID (optional)</Name> <Val>video-combfilter-wav</Val> </String>
<String> <Name>video name</Name> <Val>combfilter-wav</Val> </String>
<String> <Name>webpage title</Name> <Val>Comb filter with .wav audio</Val> </String>
<String> <Name>caption</Name> <Val>Modifying the LabVIEW VI of a comb filter to process a .wav audio signal</Val> </String>
</Cluster>




<String> <Name>secend</Name> <Val></Val> </String>
<!-------------------------------------------------------->
<String> <Name>sec</Name> <Val>References</Val> </String>

<Cluster> <Name>list</Name> <NumElts>3</NumElts>
<EW> <Name>type</Name> <Choice>Bulleted</Choice> <Choice>Enumerated</Choice> <Val>0</Val> </EW>
<String> <Name>list name (optional)</Name> <Val></Val> </String>
<Array> <Name>list items</Name> <Dimsize>2</Dimsize>
	<String> <Name>String</Name> <Val>Moore, F.R., "Elements of Computer Music," Prentice-Hall, 1990, ISBN 0-13-252552-6.</Val> </String>
	<String> <Name>String</Name> <Val>Dodge, C. and T.A. Jerse, "Computer Music: Synthesis, Composition, and Performance," 2nd ed., Schirmer Books, 1997,
			ISBN 0-02-864682-7</Val> </String>
</Array>
</Cluster>





<String> <Name>secend</Name> <Val></Val> </String>
<!-------------------------------------------------------->

</LVData>
